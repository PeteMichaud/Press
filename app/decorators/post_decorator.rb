class PostDecorator < Draper::Base
  decorates :post

  def render preview = false
    unless preview
      h.render :partial => "posts/#{object_type}"
    else
      h.render :partial => "posts/#{object_type}_preview"
    end
  end

  def nav
    h.render :partial => 'posts/post_nav.html.erb'
  end

  def read_more_link
    if body.present?
      h.content_tag :div, :class => 'readmore' do
        h.link_to 'Read more...', full_url
      end
    end
  end

  def header
    @_header.gsub! '()', "(%s)" % h.url_for("/#{post.seo_url}/#{url_query}")
  end

  def full_url
    "/#{seo_url}/#{url_query}"
  end

  def edit_link
    if h.current_user == user
      nav_item do
        h.link_to '<i class="icon-pencil"></i>Edit', edit_admin_content_path(object_type, self)
      end
    end
  end

  def comments_link
    if allow_comments
      nav_item do
        h.link_to "<i class='icon-comment'></i>Comments (#{comments.count})", "#{full_url}#comments"
      end
    end
  end

  def nav_item
    h.content_tag :li, :class => 'pull-right' do
      yield
    end
  end


  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #
  #   Or, optionally enable "lazy helpers" by including this module:
  #     include Draper::LazyHelpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #
  #   def created_at
  #     h.content_tag :span, attributes["created_at"].strftime("%a %m/%d/%y"),
  #                   :class => 'timestamp'
  #   end
end
